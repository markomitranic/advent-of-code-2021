# Day 5

## Preparation

```elixir
Mix.install([:kino, :vega_lite])

alias VegaLite, as: Vl
```

## Input - Test

```elixir
input = """
0,9 -> 5,9
8,0 -> 0,8
9,4 -> 3,4
2,2 -> 2,1
7,0 -> 7,4
6,4 -> 2,0
0,9 -> 2,9
3,4 -> 1,4
0,0 -> 8,8
5,5 -> 8,2
"""
```

## Input - Real

```elixir
input = Kino.Input.textarea("Please enter your input")
```

```elixir
input = Kino.Input.read(input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Solution - Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
parsed_input =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    line
    |> String.replace(" -> ", ",")
    |> String.split(",")
    |> Enum.map(&String.to_integer/1)
    |> List.to_tuple()
  end)

orthogonal_lines =
  parsed_input
  |> Enum.filter(fn
    {x1, _, x1, _} -> true
    {_, y1, _, y1} -> true
    _ -> false
  end)
```

```elixir
plot_data =
  orthogonal_lines
  |> Enum.with_index()
  |> Enum.flat_map(fn {{x1, y1, x2, y2}, i} ->
    [%{"id" => i, "x" => x1, "y" => -y1}, %{"id" => i, "x" => x2, "y" => -y2}]
  end)

plot =
  Vl.new(width: 400, height: 400)
  |> Vl.mark(:line)
  |> Vl.data_from_values(plot_data)
  |> Vl.encode_field(:x, "x", type: :quantitative, axis: [orient: "top"])
  |> Vl.encode_field(:y, "y", type: :quantitative, axis: [orient: "left"])
  |> Vl.encode_field(:color, "id", type: :nominal)
  |> Kino.VegaLite.new()
```

```elixir
dots =
  orthogonal_lines
  |> Enum.map(fn
    {x1, y1, x1, y2} ->
      steps = Enum.to_list(y1..y2)
      axis = Enum.map(Enum.to_list(1..length(steps)), fn _ -> x1 end)
      {axis, steps}

    {x1, y1, x2, y1} ->
      steps = Enum.to_list(x1..x2)
      axis = Enum.map(Enum.to_list(1..length(steps)), fn _ -> y1 end)
      {steps, axis}
  end)
  |> Enum.map(fn {x, y} -> Enum.zip(x, y) end)
  |> Enum.flat_map(fn line -> line end)
```

```elixir
dangerous_places =
  dots
  |> Kernel.--(Enum.uniq(dots))
  |> Enum.uniq()
  |> Enum.map(fn {x, y} -> %{"x" => x, "y" => -y} end)

plot =
  Vl.new(width: 400, height: 400)
  |> Vl.mark(:circle)
  |> Vl.data_from_values(dangerous_places)
  |> Vl.encode_field(:x, "x", type: :quantitative, axis: [orient: "top"])
  |> Vl.encode_field(:y, "y", type: :quantitative, axis: [orient: "left"])
  |> Kino.render()

length(dangerous_places)
```

<!-- livebook:{"branch_parent_index":2} -->

## Solution - Part 2

```elixir
parsed_input =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    line
    |> String.replace(" -> ", ",")
    |> String.split(",")
    |> Enum.map(&String.to_integer/1)
    |> List.to_tuple()
  end)
```

```elixir
plot_data =
  parsed_input
  |> Enum.with_index()
  |> Enum.flat_map(fn {{x1, y1, x2, y2}, i} ->
    [%{"id" => i, "x" => x1, "y" => -y1}, %{"id" => i, "x" => x2, "y" => -y2}]
  end)

plot =
  Vl.new(width: 400, height: 400)
  |> Vl.mark(:line)
  |> Vl.data_from_values(plot_data)
  |> Vl.encode_field(:x, "x", type: :quantitative, axis: [orient: "top"])
  |> Vl.encode_field(:y, "y", type: :quantitative, axis: [orient: "left"])
  |> Vl.encode_field(:color, "id", type: :nominal)
  |> Kino.VegaLite.new()
```

```none
1.1....11.
.111...2..
..2.1.111.
...1.2.2..
.112313211
...1.2....
..1...1...
.1.....1..
1.......1.
222111....
```

```elixir
dots =
  parsed_input
  |> Enum.map(fn
    {x1, y1, x1, y2} ->
      new_y = Enum.to_list(y1..y2)
      new_x = Enum.map(Enum.to_list(1..length(new_y)), fn _ -> x1 end)
      {new_x, new_y}

    {x1, y1, x2, y1} ->
      new_x = Enum.to_list(x1..x2)
      new_y = Enum.map(Enum.to_list(1..length(new_x)), fn _ -> y1 end)
      {new_x, new_y}

    {x1, y1, x2, y2} ->
      {_, x_acc, y_acc} =
        x1..x2
        |> Enum.reduce({0, [], []}, fn _, {i, x_acc, y_acc} ->
          new_x = if x1 > x2, do: abs(x1 - i), else: abs(x1 + i)
          new_y = if y1 > y2, do: abs(y1 - i), else: abs(y1 + i)
          {i + 1, x_acc ++ [new_x], y_acc ++ [new_y]}
        end)

      {x_acc, y_acc}
  end)
  |> Enum.map(fn {x, y} -> Enum.zip(x, y) end)
  |> Enum.flat_map(fn line -> line end)
```

```elixir
"""
..........
.......2..
..2.......
.....2.2..
...23.32..
.....2....
..........
..........
..........
222.......
"""
|> String.trim()
|> String.split("\n")
|> Enum.each(&IO.inspect/1)

dangerous_places =
  dots
  |> Kernel.--(Enum.uniq(dots))
  |> Enum.uniq()
  |> Enum.map(fn {x, y} -> %{"x" => x, "y" => -y} end)

plot =
  Vl.new(width: 100, height: 200)
  |> Vl.mark(:circle)
  |> Vl.data_from_values(dangerous_places)
  |> Vl.encode_field(:x, "x", type: :quantitative, axis: [orient: "top"])
  |> Vl.encode_field(:y, "y", type: :quantitative, axis: [orient: "left"])
  |> Kino.render()

length(dangerous_places)
```
