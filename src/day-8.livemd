# Day 8

## Prep

```elixir
Mix.install([:kino])
```

## Input - Test data

```elixir
input = """
acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf
"""
```

## Solution - Part 1

```
  0:      1:      2:      3:      4:
 aaaa    ....    aaaa    aaaa    ....
b    c  .    c  .    c  .    c  b    c
b    c  .    c  .    c  .    c  b    c
 ....    ....    dddd    dddd    dddd
e    f  .    f  e    .  .    f  .    f
e    f  .    f  e    .  .    f  .    f
 gggg    ....    gggg    gggg    ....

  5:      6:      7:      8:      9:
 aaaa    aaaa    aaaa    aaaa    aaaa
b    .  b    .  .    c  b    c  b    c
b    .  b    .  .    c  b    c  b    c
 dddd    dddd    ....    dddd    dddd
.    f  e    f  .    f  e    f  .    f
.    f  e    f  .    f  e    f  .    f
 gggg    gggg    ....    gggg    gggg 
```

```elixir
{patterns, digits} =
  input
  |> String.split("|", trim: true)
  |> Enum.map(&String.split/1)
  |> List.to_tuple()

charmap = %{
  0 => "abcefg",
  1 => "cf",
  2 => "1cdeg",
  3 => "acdfg",
  4 => "bcdf",
  5 => "abdfg",
  6 => "abdefg",
  7 => "acf",
  8 => "abcdefg",
  9 => "abcdfg"
}

charmap_lenghts = %{
  2 => 1,
  3 => 7,
  4 => 4,
  7 => 8
}

patterns
|> Enum.map(fn item ->
  {item, Map.get(charmap_lenghts, String.length(item), nil)}
end)
```
